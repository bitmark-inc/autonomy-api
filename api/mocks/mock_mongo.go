// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bitmark-inc/autonomy-api/store (interfaces: MongoStore)

// Package mock_store is a generated GoMock package.
package mocks

import (
	schema "github.com/bitmark-inc/autonomy-api/schema"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMongoStore is a mock of MongoStore interface
type MockMongoStore struct {
	ctrl     *gomock.Controller
	recorder *MockMongoStoreMockRecorder
}

// MockMongoStoreMockRecorder is the mock recorder for MockMongoStore
type MockMongoStoreMockRecorder struct {
	mock *MockMongoStore
}

// NewMockMongoStore creates a new mock instance
func NewMockMongoStore(ctrl *gomock.Controller) *MockMongoStore {
	mock := &MockMongoStore{ctrl: ctrl}
	mock.recorder = &MockMongoStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMongoStore) EXPECT() *MockMongoStoreMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockMongoStore) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockMongoStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMongoStore)(nil).Close))
}

// CreateAccount mocks base method
func (m *MockMongoStore) CreateAccount(arg0 *schema.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockMongoStoreMockRecorder) CreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockMongoStore)(nil).CreateAccount), arg0)
}

// Health mocks base method
func (m *MockMongoStore) Health(arg0 []string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health
func (mr *MockMongoStoreMockRecorder) Health(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockMongoStore)(nil).Health), arg0)
}

// NearestCount mocks base method
func (m *MockMongoStore) NearestCount(arg0 int, arg1 schema.Location) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NearestCount", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NearestCount indicates an expected call of NearestCount
func (mr *MockMongoStoreMockRecorder) NearestCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NearestCount", reflect.TypeOf((*MockMongoStore)(nil).NearestCount), arg0, arg1)
}

// NearestDistance mocks base method
func (m *MockMongoStore) NearestDistance(arg0 int, arg1 schema.Location) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NearestDistance", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NearestDistance indicates an expected call of NearestDistance
func (mr *MockMongoStoreMockRecorder) NearestDistance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NearestDistance", reflect.TypeOf((*MockMongoStore)(nil).NearestDistance), arg0, arg1)
}

// Ping mocks base method
func (m *MockMongoStore) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockMongoStoreMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMongoStore)(nil).Ping))
}

// UpdateAccountGeoPosition mocks base method
func (m *MockMongoStore) UpdateAccountGeoPosition(arg0 string, arg1, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountGeoPosition", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountGeoPosition indicates an expected call of UpdateAccountGeoPosition
func (mr *MockMongoStoreMockRecorder) UpdateAccountGeoPosition(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountGeoPosition", reflect.TypeOf((*MockMongoStore)(nil).UpdateAccountGeoPosition), arg0, arg1, arg2)
}
